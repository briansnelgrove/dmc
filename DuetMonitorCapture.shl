#!/bin/bash

# duetMonitorCapture.shl
# - monitor a duet powered printers status
# - send push notifications to Andoid devices using notify when prints complete
# - capture images from a mjpeg source
# - conver the still images to a video using ffmpeg when prints are complete
#
#
# v0.02
#  update to use external configuration file
#
# v0.01
#  initial release
#
# notes:
#  the system must have jq, curl, ffmpeg, nofity and wget installed for this to run!
#  nohup /usr/local/bin/mjpg_streamer -i "/usr/local/lib/input_uvc.so -d /dev/video0 -r 1280x720" -o "/usr/local/lib/output_http.so -w /usr/local/www" &> mjpg_streamer.out&

# verify dependnecies are installed
command -v curl >/dev/null 2>&1 || { echo >&2 "This program requires cURL but it's not installed. To install try: 'sudo apt install curl' on Debian based systems."; return 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "This program requires jq but it's not installed. To install try: 'sudo apt install jq' on Debian based systems."; return 1; }
command -v ffmpeg >/dev/null 2>&1 || { echo >&2 "This program requires ffmpeg but it's not installed. To install try: 'sudo apt install ffmpeg' on Debian based systems."; return 1; }
command -v notify >/dev/null 2>&1 || { echo >&2 "This program requires notify but it's not installed. To install try: 'sudo apt install notify' on Debian based systems."; return 1; }
command -v curl >/dev/null 2>&1 || { echo >&2 "This program requires cURL but it's not installed. To install try: 'sudo apt install curl' on Debian based systems."; return 1; }
command -v wget >/dev/null 2>&1 || { echo >&2 "This program requires wget but it's not installed. To install try: 'sudo apt install wget' on Debian based systems."; return 1; }

# get the current working directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# see if the production config file exists, if not try falling back to the dist file
FILE="$DIR/DuetMonitorCapture.config";
DISTFILE="$DIR/DuetMonitorCapture.config.dist";

if [ -f "$FILE" ]; then
 echo "Configuration file found, sourcing contents";
 . "$FILE";
else
 if [ -f "$DISTFILE" ]; then
  echo "!!!~~~ ATTENTION ~~~!!!"
  echo "Distribution file found, it should really be renamed ${FILE} and have its values updated so it will not be overwritten by a git pull.";
  echo "Sourcing distribution file";
  . "$DISTFILE";
 fi
fi

# quick variables to check output of webcam
RESPONSE=response.txt;
HEADERS=headers.txt;
# curl the webcam source
curl -s -D $HEADERS "http://$MJPEG_SOURCE:8080/?action=snapshot" -o $RESPONSE;
# grab the status - should be 200 if things are working correctly
STATUS=$(cat $HEADERS | head -n 1 | awk '{print $2}');

if [[ $STATUS != '200' ]]; then
 rm $RESPONSE;
 rm $HEADERS;
 echo "There was a problem connecting to the video stream @ http://$MJPEG_SOURCE:8080/?action=snapshot !";
 echo "Please check make sure the stream is available before started DuetMonitorCapture";
 return;
else
 echo "Connection to video stream successful @ http://$MJPEG_SOURCE:8080/?action=snapshot - continuing.";
 rm $RESPONSE;
 rm $HEADERS;
fi

# these variables are set by the script and do not need to be modifiec, default them to empty strings
FILE='';
STATUS='';
PREVIOUS_STATUS='';
CURRENT_STATUS='';
CURRENT_STATUS_DESCRIPTION='';
PREVIOUS_LAYER='';
CURRENT_LAYER='';
TIME_STAMP='';

# make sure the snapshot directory exists
if [ ! -d "$SNAPSHOT_DIRECTORY" ]; then
 echo "$SNAPSHOT_DIRECTORY does not exist, attempting to create it.";
 mkdir "$SNAPSHOT_DIRECTORY";
fi
if [ ! -d "$SNAPSHOT_DIRECTORY" ]; then
 echo "$SNAPSHOT_DIRECTORY could not be created!";
 return;
fi

# get the initial status of the printer
# this gets all of the needed information in JSON format, use jq later to get the key/values we want later
STATUS=$(curl -s $PRINTER/rr_status?type=2);
# get the printers status
PREVIOUS_STATUS=$(echo "$STATUS" | jq -r '.status');

# if we are printing grab the file name
if [ "$PREVIOUS_STATUS" = 'P' ] ; then
 # get the starting layer - there is probably a better way but stacking these commands works
 PREVIOUS_LAYER=$(echo "$STATUS" | jq -r '.coords.xyz[]' | tail -1);  
 # grab the filename while we are at it
 FILE=$(curl -s $PRINTER/rr_fileinfo?type=1 | jq -r '.fileName' | cut -d. -f1);
fi

# start our infinite loop
while [ 1 ]; do
 # get our current timestamp
 TIME_STAMP=$(date '+%Y%m%d%H%M%S');
 # grab the printer status
 STATUS=$(curl -s $PRINTER/rr_status?type=2);
 # extract the current status
 CURRENT_STATUS=$(echo "$STATUS" | jq -r '.status');
 # extract the current layer
 CURRENT_LAYER=$(echo "$STATUS" | jq -r '.coords.xyz[]' | tail -1);
 # figure out what the current status means
 case "$CURRENT_STATUS" in
  'P') CURRENT_STATUS_DESCRIPTION='Printing';;
  'F') CURRENT_STATUS_DESCRIPTION='Flashing Firmware';;
  'H') CURRENT_STATUS_DESCRIPTION='Halted';;
  'D') CURRENT_STATUS_DESCRIPTION='Pausing/Decelerating';;
  'S') CURRENT_STATUS_DESCRIPTION='Paused/Stopped';;
  'R') CURRENT_STATUS_DESCRIPTION='Resuming';;
  'M') CURRENT_STATUS_DESCRIPTION='Simulating';;
  'B') CURRENT_STATUS_DESCRIPTION='Busy';;
  'T') CURRENT_STATUS_DESCRIPTION='Changing Tool';;
  'I') CURRENT_STATUS_DESCRIPTION='Idle';;
 esac
  echo "Currently $CURRENT_STATUS_DESCRIPTION '$FILE' at $CURRENT_LAYER Z height";
 # see if the current status is the same as the previous status
 if [ "$CURRENT_STATUS" != "$PREVIOUS_STATUS" ]; then
  # if we have changed status and we are printing
  if [ "$CURRENT_STATUS" = 'P' ]; then
   # make sure we have the most recent print name
   FILE=$(curl -s $PRINTER/rr_fileinfo?type=1 | jq -r '.fileName' | cut -d. -f1);
  fi
  # if the current status is idle and the previous status was printing we just finished a print
  if [ "$CURRENT_STATUS" == 'I' ] && [ "$PREVIOUS_STATUS" == 'P' ]; then
   # let the user know!
   notify -t "$CURRENT_STATUS_DESCRIPTION $FILE" >> /dev/null
   # make sure we have some snapshots
   FILE_COUNT=$(ls -1 "$SNAPSHOT_DIRECTORY" | wc -l);
   if [ ! "$FILE_COUNT" = '0' ]; then
    # probalby a better way to do this but...
    # move into the snapshots directory
    cd "$SNAPSHOT_DIRECTORY";
    # rename all of the files with WAY too many 0's for padding
    ls *.jpeg | cat -n | while read i f; do mv "$f" `printf "image-%015d.jpeg" "$i"`; done
    # convert the file to a video
    ffmpeg -r 1/"$VIDEO_FRAMERATE" -i image-%015d.jpeg -c:v libx264 -vf fps=25 -pix_fmt yuv420p "$FILE.mp4";
    # remove the image files when we are done
    /bin/rm image-*.jpeg;
    # jump up one directory so we get back to were we started
    cd ..;
   fi
  fi
 fi
 # see if we are taking snapshots and make sure we are printing
 if [ "$TAKE_SNAPSHOTS" = 'true' ] && [ "$CURRENT_STATUS" = 'P' ]; then
  # see if it is time to take a snapshot
  if [ "$LAYER_CHANGE" != 'true' ] || [ "$CURRENT_LAYER" != "$PREVIOUS_LAYER" ]; then
   # grab a snapshot
   wget "http://$MJPEG_SOURCE:8080/?action=snapshot" -O "$SNAPSHOT_DIRECTORY/$FILE$TIME_STAMP.jpeg" &> /dev/null;
   # update the layer
   PREVIOUS_LAYER="$CURRENT_LAYER";
  fi
 fi
 # sleep for a bit, we all need a good nap from time to time
 sleep "$QUERY_INTERVAL";
 # update the previous status to the current status before we loop again
 PREVIOUS_STATUS="$CURRENT_STATUS";
done